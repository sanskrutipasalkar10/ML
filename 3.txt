1.

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

data = {
'Square_Feet': [1500, 2500, 1800, 2200, 1700, 2400, 2100, 2600, 1900,
2300],
'Bedrooms': [3, 4, 3, 4, 2, 4, 3, 5, 3, 4],
'Age': [10, 15, 5, 20, 10, 15, 10, 5, 15, 20],
'Price': [300000, 500000, 400000, 450000, 320000, 480000, 430000, 550000,
410000, 470000]
}

print(df.describe())

X = df[['Square_Feet', 'Bedrooms', 'Age']] # Features
y = df['Price'] # Target variable

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Evaluate the model
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R^2 Score:", r2_score(y_test, y_pred))

print("Predicted Prices:", predicted_prices)
print("Actual Prices:", y_test.values)



2..


# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load the dataset (replace 'crash.csv' with your actual file)
df = pd.read_csv('crash.csv')

# Display the number of null values and remove them if present
print("Null values in each column before removing:")
print(df.isnull().sum())
df = df.dropna()

# Display dataset columns to ensure correct feature and target selection
print("Dataset columns:", df.columns)

# Assume 'age' and 'speed' are features, and 'fate' is the target (1 for survived, 0 for not survived)
X = df[['age', 'speed']]  # Replace with your feature columns
y = df['fate']  # Replace 'fate' with your target column

# Split the dataset into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a logistic regression model
model = LogisticRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("Classification Report:")
print(classification_report(y_test, y_pred))

predicted_survivability = model.predict(X_test)

print("Predicted Survivability:", predicted_survivability)
print("Actual Outcomes:", y_test.values)
