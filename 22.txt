1

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the dataset (replace with the actual dataset path)
# For example, the dataset might have columns: 'Area', 'Price'
df = pd.read_csv('house_price.csv')

# Let's assume the dataset has the following columns: 'Area' (independent variable) and 'Price' (dependent variable)
X = df[['Area']]  # Independent variable (area of house)
y = df['Price']   # Dependent variable (price of the house)

# Split the data into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the Simple Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error (MSE) for Simple Linear Regression: {mse:.2f}")

# Predict the price for a new house with a given area
area_example = [[2000]]  # Example: area = 2000 square feet
predicted_price = model.predict(area_example)
print(f"Predicted Price for a house with 2000 square feet area: {predicted_price[0]:.2f}")

# Visualizing the results (Plotting the data and the regression line)
plt.scatter(X, y, color='blue')  # Plot the data points
plt.plot(X, model.predict(X), color='red')  # Plot the regression line
plt.title('Simple Linear Regression: House Price Prediction')
plt.xlabel('Area of House (sq. ft.)')
plt.ylabel('Price of House')
plt.show()


2

import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules
from mlxtend.preprocessing import TransactionEncoder

# Load the dataset (replace with actual groceries dataset)
# Example dataset format: each transaction is a list of items
groceries = [['milk', 'bread', 'butter'],
             ['bread', 'butter'],
             ['milk', 'bread', 'butter', 'cheese'],
             ['milk', 'bread'],
             ['butter', 'cheese'],
             ['bread', 'butter', 'cheese']]

# Convert the dataset into a format suitable for the Apriori algorithm
te = TransactionEncoder()
groceries_transformed = te.fit_transform(groceries)
groceries_df = pd.DataFrame(groceries_transformed, columns=te.columns_)

# Apply Apriori algorithm to find frequent itemsets with a minimum support of 0.25
frequent_itemsets = apriori(groceries_df, min_support=0.25, use_colnames=True)

# Generate association rules from the frequent itemsets
rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1.0)

# Display the frequent itemsets and association rules
print("Frequent Itemsets:")
print(frequent_itemsets)
print("\nAssociation Rules:")
print(rules)

# Filter rules where the confidence is greater than 0.7 (if desired)
high_confidence_rules = rules[rules['confidence'] > 0.7]
print("\nHigh Confidence Rules:")
print(high_confidence_rules)
