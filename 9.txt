1.

# Importing necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge, Lasso
from sklearn.metrics import mean_squared_error
import numpy as np

# Load the dataset (replace 'boston_houses.csv' with the correct file path)
df = pd.read_csv('boston_houses.csv')

# Selecting 'RM' (Rooms) and 'Price' columns
df = df[['RM', 'Price']]

# Split the dataset into training and testing sets (80% training, 20% testing)
X = df[['RM']]  # Feature (number of rooms)
y = df['Price']  # Target variable (house price)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Ridge Regression Model
ridge_model = Ridge(alpha=1.0)  # alpha is the regularization strength
ridge_model.fit(X_train, y_train)

# Predict the house price using Ridge Regression
ridge_price_pred = ridge_model.predict([[5]])  # Predict for 5 rooms

# Lasso Regression Model
lasso_model = Lasso(alpha=0.1)  # alpha is the regularization strength
lasso_model.fit(X_train, y_train)

# Predict the house price using Lasso Regression
lasso_price_pred = lasso_model.predict([[5]])  # Predict for 5 rooms

# Evaluate the models on the test set
ridge_y_pred = ridge_model.predict(X_test)
lasso_y_pred = lasso_model.predict(X_test)

# Calculate Mean Squared Error for both models
ridge_mse = mean_squared_error(y_test, ridge_y_pred)
lasso_mse = mean_squared_error(y_test, lasso_y_pred)

# Print the results
print(f"Ridge Regression predicted price for a house with 5 rooms: ${ridge_price_pred[0]:,.2f}")
print(f"Lasso Regression predicted price for a house with 5 rooms: ${lasso_price_pred[0]:,.2f}")
print(f"Ridge Regression Mean Squared Error: {ridge_mse:.2f}")
print(f"Lasso Regression Mean Squared Error: {lasso_mse:.2f}")


2.

# Importing necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Load the UniversalBank dataset (replace 'UniversalBank.csv' with the correct file path)
df = pd.read_csv('UniversalBank.csv')

# Display the first few rows to understand the dataset
print(df.head())

# Preprocessing: Assuming target variable is 'PersonalLoan' (1 = accepted loan, 0 = rejected)
# Also assuming columns such as 'Age', 'Income', 'CreditScore', etc., are relevant features.

# Select features and target variable
X = df[['Age', 'Income', 'CreditScore']]  # Example features (replace with actual relevant columns)
y = df['PersonalLoan']  # Target variable (whether the loan was accepted)

# Split the dataset into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the Linear SVM model
svm_model = SVC(kernel='linear')  # Using linear kernel
svm_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = svm_model.predict(X_test)

# Evaluate the model
print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("Classification Report:")
print(classification_report(y_test, y_pred))
