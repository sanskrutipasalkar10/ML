1


# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_boston
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Load the Boston Housing dataset
boston = load_boston()
X = boston.data[:, 5].reshape(-1, 1)  # Use the 'RM' (average number of rooms) feature
y = boston.target  # Target variable (house price)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Polynomial Regression (Degree 3)
poly = PolynomialFeatures(degree=3)
X_poly = poly.fit_transform(X_train)

# Fit the model using Linear Regression
poly_reg_model = LinearRegression()
poly_reg_model.fit(X_poly, y_train)

# Predict the house prices on the test set
X_test_poly = poly.transform(X_test)
y_pred = poly_reg_model.predict(X_test_poly)

# Evaluate the model using Mean Squared Error
mse = mean_squared_error(y_test, y_pred)

# Visualize the Polynomial Regression result (train data)
plt.scatter(X_train, y_train, color='red')
plt.plot(X_train, poly_reg_model.predict(poly.transform(X_train)), color='blue')
plt.title('Polynomial Regression (Degree 3)')
plt.xlabel('Average Number of Rooms (RM)')
plt.ylabel('House Price')
plt.show()

# Print MSE
print(f"Mean Squared Error: {mse:.2f}")



2

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
from sklearn import tree

import matplotlib.pyplot as plt

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data_banknote_authentication.txt"

column_names = ['Variance', 'Skewness', 'Curtosis', 'Entropy', 'Class']
df = pd.read_csv(url, header=None, names=column_names)

X = df.drop('Class', axis=1).values # Features
y = df['Class'].values # Target (0 for forged, 1 for genuine)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=42)

dt_classifier = DecisionTreeClassifier(random_state=42) 
dt_classifier.fit(X_train, y_train) 

y_pred = dt_classifier.predict(X_test)
# Calculate accuracy 
accuracy = accuracy_score(y_test, y_pred) 
print(f"Accuracy: {accuracy:.4f}") 

print("Classification Report:\n", classification_report(y_test, y_pred)) 

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

plt.figure(figsize=(20,10)) 
tree.plot_tree(dt_classifier, feature_names=column_names[:-1],  class_names=['Forged', 'Genuine'], filled=True) 
plt.show()