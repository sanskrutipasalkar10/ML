1.

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from sklearn.model_selection import train_test_split

# Load the Google Stock Price dataset (You can use Yahoo Finance API or load from a CSV)
# For demonstration, we're assuming a CSV with 'Date' and 'Close' columns.
df = pd.read_csv('GOOG_stock_data.csv')

# Preview the data
print(df.head())

# Preprocess the data: Convert 'Date' to datetime and 'Close' as the target
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

# We only need the 'Close' prices for predicting trends
data = df[['Close']]

# Normalize the data (Min-Max Scaling)
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Prepare the data for the RNN model: Use a window of previous 60 days to predict the next day's price
def create_dataset(data, time_step=60):
    X, y = [], []
    for i in range(time_step, len(data)):
        X.append(data[i-time_step:i, 0])  # Use the previous 'time_step' days as input
        y.append(data[i, 0])  # Predict the next day's closing price
    return np.array(X), np.array(y)

X, y = create_dataset(scaled_data, time_step=60)

# Reshape X to be 3D for the LSTM model (samples, time steps, features)
X = X.reshape(X.shape[0], X.shape[1], 1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the RNN model with LSTM layers
model = Sequential()

# Add LSTM layer
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(units=50, return_sequences=False))

# Add Dense layer (fully connected layer)
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Predict the stock price on the test set
predicted_prices = model.predict(X_test)

# Inverse transform the predicted prices and actual prices to get the actual values in the original scale
predicted_prices = scaler.inverse_transform(predicted_prices)
y_test_scaled = scaler.inverse_transform(y_test.reshape(-1, 1))

# Analyze the trend (increase or decrease) of the next day's stock price
predicted_trends = np.diff(predicted_prices.flatten())  # Difference between consecutive predictions
real_trends = np.diff(y_test_scaled.flatten())  # Real stock price differences for comparison

# Plot the predicted vs actual stock prices
plt.figure(figsize=(10,6))
plt.plot(y_test_scaled, label='Real Stock Prices')
plt.plot(predicted_prices, label='Predicted Stock Prices')
plt.title('Google Stock Price Prediction with RNN')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

# Print trend analysis (increase or decrease)
trend_analysis = []
for i in range(len(predicted_trends)):
    if predicted_trends[i] > 0:
        trend_analysis.append('Increase')
    else:
        trend_analysis.append('Decrease')

print("Predicted Trends (Increase/Decrease):")
print(trend_analysis)

2

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Load the dataset (assuming 'Area' or 'Number_of_Rooms' and 'Price' columns)
df = pd.read_csv('Salary_positions.csv')  # Replace with your dataset path

# Preview the data
print(df.head())

# Extract features (e.g., 'Area') and target (e.g., 'Price')
X = df[['Area']]  # Feature: Area (or any other relevant feature)
y = df['Price']   # Target: Price

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Linear Regression model
linear_model = LinearRegression()

# Train the model
linear_model.fit(X_train, y_train)

# Predict the prices on the test set
y_pred = linear_model.predict(X_test)

# Evaluate the model using Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")

# Visualize the results
plt.scatter(X, y, color='red')
plt.plot(X, linear_model.predict(X), color='blue')
plt.title('Simple Linear Regression')
plt.xlabel('Area')
plt.ylabel('Price')
plt.show()

# Predict the price for a new house (e.g., area of 2500 square feet)
new_area = np.array([[2500]])  # Example: area = 2500
predicted_price = linear_model.predict(new_area)
print(f"Predicted Price for house with area 2500 sq.ft: ${predicted_price[0]:.2f}")
