1.


import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

# Load dataset (replace with actual file path)
df = pd.read_csv('house_prices.csv')

# Let's assume 'Price' is the column we want to classify
# Create a new column 'Price_Class' for classification (above or below average price)
average_price = df['Price'].mean()
df['Price_Class'] = np.where(df['Price'] > average_price, 1, 0)  # 1 for above average, 0 for below average

# Drop columns that are not needed or might contain categorical data (modify as per dataset)
X = df.drop(columns=['Price', 'Price_Class'])  # Features
y = df['Price_Class']  # Target

# Handle missing values (if any)
X = X.fillna(X.mean())  # Impute missing values with mean of column

# Normalize the feature data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Build the ANN model
model = Sequential()

# Input layer
model.add(Dense(units=64, activation='relu', input_dim=X_train.shape[1]))

# Hidden layer
model.add(Dense(units=32, activation='relu'))

# Output layer (binary classification: above or below average price)
model.add(Dense(units=1, activation='sigmoid'))

# Compile the model
model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model on the test set
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

# Predict the class for a sample (e.g., for a new house)
sample_house = X_test[0].reshape(1, -1)  # Example of one row (new house data)
prediction = model.predict(sample_house)
print(f"Prediction (Above Average = 1, Below Average = 0): {prediction[0][0] > 0.5}")


2.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error

# Load dataset (replace with actual file path)
df = pd.read_csv('house_prices.csv')

# Assume 'Price' is the target variable and we use all other columns as features
X = df.drop(columns=['Price'])  # Features
y = df['Price']  # Target

# Handle missing values (if any)
X = X.fillna(X.mean())

# Normalize the feature data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Create a Multiple Linear Regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Predict the house prices using the test set
y_pred = model.predict(X_test)

# Calculate the Mean Squared Error (MSE) of the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")

# Predict the price for a new house (example)
sample_house = X_test[0].reshape(1, -1)  # Example of one row (new house data)
predicted_price = model.predict(sample_house)
print(f"Predicted House Price: {predicted_price[0]:.2f}")


