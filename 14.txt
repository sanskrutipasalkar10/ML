1.

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras import optimizers

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Preprocessing the data
# Reshape the data to include the channel dimension and normalize the values to range [0, 1]
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1).astype('float32') / 255
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1).astype('float32') / 255

# Convert labels to categorical (one-hot encoding)
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Build the CNN model
model = Sequential()

# Add the first convolutional layer
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Add the second convolutional layer
model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Flatten the output and add a dense fully connected layer
model.add(Flatten())
model.add(Dense(128, activation='relu'))

# Output layer with 10 units (one for each digit 0-9)
model.add(Dense(10, activation='softmax'))

# Compile the model
model.compile(optimizer=optimizers.Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=5, batch_size=128, validation_data=(x_test, y_test))

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {test_acc * 100:.2f}%")

# Predict the digit for a random image from the test set
random_index = np.random.randint(0, x_test.shape[0])
test_image = x_test[random_index]

# Display the image
plt.imshow(test_image.reshape(28, 28), cmap='gray')
plt.title(f"Predicted Digit: {np.argmax(model.predict(np.expand_dims(test_image, axis=0)))}")
plt.show()



2.

import pandas as pd
import numpy as np

# Create a custom dataset
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David', np.nan],
    'Age': [25, 30, np.nan, 35, 40],
    'Salary': [50000, 60000, 70000, np.nan, 90000]
}

# Convert it to a DataFrame
df = pd.DataFrame(data)

# Display the original DataFrame
print("Original DataFrame:")
print(df)

# Find all null values in the dataset
print("\nNull values in the dataset:")
print(df.isnull().sum())

# Remove rows with any null values
df_cleaned = df.dropna()

# Display the cleaned DataFrame
print("\nDataFrame after removing rows with null values:")
print(df_cleaned)
