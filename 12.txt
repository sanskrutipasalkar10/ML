1.


# Import necessary libraries
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Load the Iris dataset
iris = load_iris()
X = iris.data  # Features (sepal length, sepal width, petal length, petal width)
y = iris.target  # Target variable (species)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the feature values (important for KNN)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Implement K-Nearest Neighbors (KNN) Classifier
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

# Predict the species on the test set
y_pred = knn.predict(X_test)

# Evaluate the model's performance
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Confusion Matrix
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))


2

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error

# Load the Salary Positions dataset
df = pd.read_csv('Salary_positions.csv')

# Assume the dataset has two columns: 'Level' and 'Salary'
X = df['Level'].values.reshape(-1, 1)  # Feature (Employee Level)
y = df['Salary'].values  # Target (Salary)

# Split the dataset into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 1. Simple Linear Regression Model
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

# Predicting the salary with the linear model
y_pred_linear = linear_model.predict(X_test)

# 2. Polynomial Linear Regression Model (degree 4)
poly = PolynomialFeatures(degree=4)
X_poly_train = poly.fit_transform(X_train)
X_poly_test = poly.transform(X_test)

polynomial_model = LinearRegression()
polynomial_model.fit(X_poly_train, y_train)

# Predicting the salary with the polynomial model
y_pred_poly = polynomial_model.predict(X_poly_test)

# Calculate Mean Squared Error for both models
mse_linear = mean_squared_error(y_test, y_pred_linear)
mse_poly = mean_squared_error(y_test, y_pred_poly)

print(f"Mean Squared Error (Simple Linear Regression): {mse_linear:.2f}")
print(f"Mean Squared Error (Polynomial Regression): {mse_poly:.2f}")

# Visualizing the results for both models
plt.figure(figsize=(10, 6))

# Plotting Simple Linear Regression results
plt.subplot(1, 2, 1)
plt.scatter(X, y, color='red')
plt.plot(X, linear_model.predict(X), color='blue')
plt.title('Simple Linear Regression')
plt.xlabel('Level')
plt.ylabel('Salary')

# Plotting Polynomial Regression results
plt.subplot(1, 2, 2)
plt.scatter(X, y, color='red')
plt.plot(X, polynomial_model.predict(poly.fit_transform(X)), color='green')
plt.title('Polynomial Regression (Degree 4)')
plt.xlabel('Level')
plt.ylabel('Salary')

plt.tight_layout()
plt.show()

# Predict the salaries for level 11 and 12
salary_11_linear = linear_model.predict(np.array([[11]]))
salary_12_linear = linear_model.predict(np.array([[12]]))
salary_11_poly = polynomial_model.predict(poly.transform([[11]]))
salary_12_poly = polynomial_model.predict(poly.transform([[12]]))

print(f"Predicted Salary for Level 11 (Linear): {salary_11_linear[0]}")
print(f"Predicted Salary for Level 12 (Linear): {salary_12_linear[0]}")
print(f"Predicted Salary for Level 11 (Polynomial): {salary_11_poly[0]}")
print(f"Predicted Salary for Level 12 (Polynomial): {salary_12_poly[0]}")
