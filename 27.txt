1.
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the house price dataset (Assume it is in CSV format)
df = pd.read_csv('house_price.csv')  # Replace with your dataset path
print(df.head())

# Split the data into features (X) and target (y)
X = df.drop('Price', axis=1)  # All columns except 'Price'
y = df['Price']  # 'Price' column

# Split the dataset into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the multiple linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model by calculating Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse}")

# Predict house prices for specific test data (e.g., [value1, value2, ..., valueN])
new_house = [[3, 2, 2000, 1]]  # Example: 3 bedrooms, 2 bathrooms, 2000 sqft, 1 floor
predicted_price = model.predict(new_house)
print(f"Predicted house price: {predicted_price[0]}")


2.

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the salary positions dataset (Assume it is in CSV format)
df = pd.read_csv('Salary_positions.csv')  # Replace with your dataset path
print(df.head())

# Split the data into features (X) and target (y)
X = df[['Level']]  # Assume 'Level' is the feature
y = df['Salary']   # 'Salary' is the target variable

# Fit the Simple Linear Regression model
simple_model = LinearRegression()
simple_model.fit(X, y)

# Predict salaries using Simple Linear Regression
y_pred_simple = simple_model.predict(X)

# Fit the Polynomial Linear Regression model (degree 4)
poly = PolynomialFeatures(degree=4)
X_poly = poly.fit_transform(X)

poly_model = LinearRegression()
poly_model.fit(X_poly, y)

# Predict salaries using Polynomial Regression
y_pred_poly = poly_model.predict(X_poly)

# Compare the two models using Mean Squared Error (MSE)
simple_mse = mean_squared_error(y, y_pred_simple)
poly_mse = mean_squared_error(y, y_pred_poly)

print(f"Simple Linear Regression MSE: {simple_mse}")
print(f"Polynomial Linear Regression MSE: {poly_mse}")

# Predict salaries for level 11 and level 12 employees
level_11 = np.array([[11]])
level_12 = np.array([[12]])

# Simple Linear Regression predictions
salary_11_simple = simple_model.predict(level_11)
salary_12_simple = simple_model.predict(level_12)

# Polynomial Regression predictions
level_11_poly = poly.transform(level_11)
level_12_poly = poly.transform(level_12)

salary_11_poly = poly_model.predict(level_11_poly)
salary_12_poly = poly_model.predict(level_12_poly)

print(f"Predicted salary of level 11 (Simple LR): {salary_11_simple[0]}")
print(f"Predicted salary of level 12 (Simple LR): {salary_12_simple[0]}")
print(f"Predicted salary of level 11 (Poly LR): {salary_11_poly[0]}")
print(f"Predicted salary of level 12 (Poly LR): {salary_12_poly[0]}")

# Plotting the results
plt.scatter(X, y, color='red')
plt.plot(X, y_pred_simple, color='blue', label='Simple Linear Regression')
plt.plot(X, y_pred_poly, color='green', label='Polynomial Linear Regression')
plt.title('Salary vs Position Level')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.legend()
plt.show()
